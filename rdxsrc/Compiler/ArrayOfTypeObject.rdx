using Core;
using Core.RDX;
using Core.Collections;


namespace RDX
{
	namespace Compiler
	{
		public final class ArrayOfTypeObject extends VType
		{
			public property largeuint dimensions;
			public property VType containedType;
			public property bool isConst;

			public function void Initialize(CompilerState cs, VType containedType, largeuint dimensions, bool isConst, ASTNode incriminateNode)
			{
				(this as VType).explicit:Initialize();

				this.containedType = containedType;
				this.dimensions = dimensions;
				this.isConst = isConst;
				this._incriminateNode = incriminateNode;
				cs.uncompiled.Add(this);
			}

			public virtual function bool Compile(CompilerState cs)
			{
				if(!containedType.isCompiled)
					return false;

				if(containedType.longName == CompilerConstants.varyingType())
					Utility.CError(incriminateNode, ErrorCode.CreatedArrayOfVarying);

				local string longName = "#" + containedType.longName + "[";
				if(this.isConst)
					longName += "C";

				for(local largeuint i=1;i<this.dimensions;i++)
					longName += ",";

				longName += "]";

				// Unwind the AOT to determine the pretty name
				local string prettyName = "";
				local VType unwind = this;
				while(unwind is ArrayOfTypeObject)
				{
					local ArrayOfTypeObject unwindAOT = unwind as ArrayOfTypeObject;
					if(unwindAOT.isConst)
						prettyName += " const";

					prettyName += "[";
					for(local largeuint i=1;i<this.dimensions;i++)
						prettyName += ",";

					prettyName += "]";
					unwind = unwindAOT.containedType;
				}
				prettyName = unwind.prettyName + prettyName;

				this.prettyName = prettyName;
				this._longName = longName;
				FinishCompile();

				cs.gst[longName] = this;

				return true;
			}

			public final intercept function bool IsObjectReference()
			{
				return true;
			}

			public final intercept function string printableName()
			{
				return "array-of type";
			}
		}
	}
}
