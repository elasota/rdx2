using Core;
using Core.RDX;
using Core.Collections;


namespace RDX
{
	namespace Compiler
	{
		public final class InitializeArray extends ValueExpression implements IEmittable
		{
			public property LocalVariable localVar;
			public property ASTNode incriminateNode;
			public property IValueExpression const[] initializers;
			public property largeuint const[] dimensions;

			public function void Initialize(LocalVariable localVar, const VTAMCollection vtams, ASTNode incriminate)
			{
				this.localVar = localVar;
				this._vtams = vtams;
				this.incriminateNode = incriminate;
			}

			public function largeuint EmitArrayElementInitialize(CompilerState cs, CodeEmission.CodeEmissionState ces, MultipleValues arrayIndex, IValueExpression[] indexExpressions, largeuint dimIndex, Scope deadScope, largeuint iidx)
			{
				local largeuint nextD = dimIndex + 1;
				local bool hasNextD = (nextD != this.dimensions.Length);

				local largeuint dim = this.dimensions[dimIndex];
				for(local largeuint i=0;i<dim;i++)
				{
					indexExpressions[dimIndex] = cs.ConstantOfType(CompilerConstants.arrayIndexType(), i, Constant.Signal.Value);

					if(hasNextD)
						iidx = EmitArrayElementInitialize(cs, ces, arrayIndex, indexExpressions, dimIndex + 1, deadScope, iidx);
					else
					{
						local MultipleValues src = Utility.SingleExpressionToList(this.initializers[iidx]);

						CodeEmission.Emit.EmitAssign(cs, ces, arrayIndex, src, deadScope, this.incriminateNode);
						iidx++;
					}
				}

				return iidx;
			}

			private function void EmitArrayInitialize(CompilerState cs, CodeEmission.CodeEmissionState ces)
			{
				local VType aist = cs.gst[CompilerConstants.arrayIndexType()] as VType;
				local VTAM[] indexVTAMs = new VTAM[this.dimensions.Length];
				local LocalVariable initTarget = this.localVar;
				local LocalVariable exportTarget = initTarget;
				local bool initAsConst = false;

				foreach(largeuint dimension, largeuint idx in this.dimensions)
					indexVTAMs[idx] = new VTAM { accessMode = AccessMode.R, vType = aist };

				local IValueExpression[] indexExprs = new IValueExpression[this.dimensions.Length];
				local MultipleValues indexValues = new MultipleValues(indexExprs, new VTAMCollection(indexVTAMs));

				local ArrayOfTypeObject arrayVType = this.localVar.vtams[0].vType as ArrayOfTypeObject;
				local ArrayOfTypeObject createVType = arrayVType;
				if(arrayVType.isConst)
				{
					// Need to form as the non-const the non-const version of this array
					local string arrayVariationCode = Utility.ArrayOfTypeCode(arrayVType.dimensions, false);

					if(arrayVType.containedType.arraysOf.ContainsKey(arrayVariationCode))
						createVType = arrayVType.containedType.arraysOf[arrayVariationCode];
					else
					{
						createVType = new ArrayOfTypeObject(cs, arrayVType.containedType, arrayVType.dimensions, false, arrayVType.incriminateNode);
						arrayVType.containedType.arraysOf[arrayVariationCode] = createVType;

						createVType.Compile(cs);
					}

					initTarget = ces.AddTemporary(createVType);
					initTarget.holdOpenTemp = true;
				}

				local ArrayIndex arrayIndex = new ArrayIndex(
					CompilerState.ConvertExpression(this.incriminateNode, initTarget, new VTAMCollection(new VTAM { vType = createVType, accessMode = AccessMode.R } )),
					indexValues,
					new VTAMCollection(new VTAM { vType = (this.vtams[0].vType as ArrayOfTypeObject).containedType, accessMode = AccessMode.P })
				);

				EmitArrayElementInitialize(cs, ces, Utility.SingleExpressionToList(arrayIndex), indexExprs, 0, new Scope(null), 0);

				if(arrayVType.isConst)
				{
					// Convert to constant array
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.PushEmpty, res1 = "Core.Array" } );
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.LocalRef, int1 = initTarget.stackIndex } );
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.Load } );
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.Call, res1 = "Core.Array/methods/ToConst()" } );
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.Cast, res1 = arrayVType.longName } );
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.LocalRef, int1 = exportTarget.stackIndex } );
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.Move } );

					// Cycle the temporary
					initTarget.holdOpenTemp = false;
					ces.Push(1, initTarget);
					ces.Pop(1);
				}
			}

			public function void EmitValues(CompilerState cs, CodeEmission.CodeEmissionState ces, bool allowLocals)
			{
				local LocalVariable temp = ces.AddTemporary(this._vtams[0].vType);

				foreach(largeuint d in this.dimensions)
					ces.AddConstantInstruction(CompilerConstants.arrayIndexType(), (d as string), Constant.Signal.Value);

				ces.AddInstruction( new CodeEmission.PInstr{ op = CodeEmission.POp.NewInstance, res1 = this._vtams[0].vType.longName, int1 = this.dimensions.Length } );
				ces.AddInstruction( new CodeEmission.PInstr{ op = CodeEmission.POp.LocalRef, int1 = temp.stackIndex } );
				ces.AddInstruction( new CodeEmission.PInstr{ op = CodeEmission.POp.Move } );

				this.localVar.stackIndex = temp.stackIndex;

				this.EmitArrayInitialize(cs, ces);

				ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.LocalRef, int1 = temp.stackIndex } );
				ces.Push(1, temp);
			}

			public virtual intercept function string printableName()
			{
				return "array initializer";
			}
		}
	}
}
