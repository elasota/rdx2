using Core;
using Core.RDX;
using Core.Collections;


namespace RDX
{
	namespace Compiler
	{
		public final class ValueCountAdjuster extends ValueExpression implements IEmittable
		{
			public property IValueExpression expression;

			public function void Initialize(IValueExpression expr, const VTAMCollection vtams)
			{
				this._vtams = vtams;
				this.expression = expr;
			}

			public function void EmitValues(CompilerState cs, CodeEmission.CodeEmissionState ces, bool allowLocals)
			{
				local largeuint vCount = this.expression.vtams.Length;
				local largeuint targetVCount = this._vtams.Length;
				CodeEmission.Emit.EmitValues(cs, ces, this.expression, allowLocals);

				while(vCount > targetVCount)
				{
					ces.AddInstruction( new CodeEmission.PInstr { op = CodeEmission.POp.Pop } );
					ces.Pop();
					vCount--;
				}
			}

			public virtual intercept function string printableName()
			{
				return "value count adjuster";
			}
		}
	}
}
